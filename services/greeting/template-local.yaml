# # This is a raw template to deploy Greeting lambda, when infra was not created by terraform
# AWSTemplateFormatVersion: '2010-09-09'
# Transform: AWS::Serverless-2016-10-31
# Description: SAM Template for Greeting Service
# # More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst

# Globals:
#   Function:
#     Timeout: 10

# Parameters:
#   Stage:
#     Type: String
#     Default: prod
#     AllowedValues:
#       - dev
#       - staging
#       - prod
#     Description: Deployment stage of the application

#   Platform:
#     Type: String
#     Default: AWS
#     AllowedValues:
#       - AWS
#       - local
#     Description: Platform where the Lambda function is deployed

#   DockerTag:
#     Type: String
#     Description: Docker image tag - Use package version for cloud deployments and any value for local dev deployments

#   Architecture:
#     Type: String
#     Default: x86_64 # supported by Github Actions
#     AllowedValues:
#       - x86_64 
#       - amd63
#       - arm64
#     Description: Architecture 
  
# Resources:
#   GreetingApi:
#     Type: AWS::Serverless::Api
#     Properties:
#       StageName: !Ref Stage
  
#   GreetingLambdaExecutionRole:
#     Type: AWS::IAM::Role
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: "Allow"
#             Principal:
#               Service: "lambda.amazonaws.com"
#             Action: "sts:AssumeRole"
#       Policies:
#         - PolicyName: "LambdaAppConfigAndSecretsManagerAccess"
#           PolicyDocument:
#             Version: "2012-10-17"
#             Statement:
#               - Effect: "Allow"
#                 Action:
#                   - "appconfig:listApplications"
#                   - "appconfig:listConfigurationProfiles"
#                   - "appconfig:listEnvironments"
#                   - "appconfig:listDeploymentStrategies"
#                   - "appconfig:CreateApplication"
#                   - "appconfig:CreateEnvironment"
#                   - "appconfig:CreateConfigurationProfile"                  
#                   - "appconfig:StartConfigurationSession"
#                   - "appconfig:GetLatestConfiguration"
#                 Resource: "*"   # Ideally, specify the ARN of the specific secrets or path expression such as "arn:aws:appconfig:*:*:application/*"
#               - Effect: "Allow"
#                 Action:
#                   - "secretsmanager:GetSecretValue"
#                 Resource: "*"  # Ideally, specify the ARN of the specific secrets or path expression such as "arn:aws:secretsmanager:*:*:secret:*"
#       ManagedPolicyArns:
#         - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

#   GreetingLambda:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: "greeting"
#       PackageType: Image
#       ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/greeting:${DockerTag}'
#       Role: !GetAtt GreetingLambdaExecutionRole.Arn
#       Architectures:
#         - !Ref Architecture     
#       Environment:
#         Variables:
#           PLATFORM: !Ref Platform
#           STAGE: !Ref Stage
#           SERVICE_NAME: greeting
#       Events:
#         HelloNamePath:
#           Type: Api
#           Properties:
#             Path: /hello/{name}
#             Method: GET
#             RestApiId:
#               Ref: GreetingApi
#         HelloPath:
#           Type: Api
#           Properties:
#             Path: /hello
#             Method: GET
#             RestApiId:
#               Ref: GreetingApi
#     Metadata:
#       Dockerfile: ./services/greeting/Dockerfile
#       DockerContext: ../../       # Set docker context to monorepo root to include local packages
#       DockerTag: !Ref DockerTag   # Set DockerTage to package version when deploying to AWS

