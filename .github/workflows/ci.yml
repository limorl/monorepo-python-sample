name: CI

on:
  pull_request:
    branches: [main]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
  pull-requests: write  # This allows the workflow to comment on PRs

jobs:
  debug-gh-token:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    steps:
      - name: Check-out Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full checkout
      - name: Debug Git Auth
        run: |
          gh auth login --with-token <<< $GH_ACTIONS_PAT
          echo "Verifying GitHub authentication..."
            gh auth status
            if [ $? -ne 0 ]; then
              echo "GitHub CLI is not authenticated"
              exit 1
            fi
          
          ENV=dev
          echo "> Deploying to $ENV environment..."

          echo "Listing variables for $ENV:"
          VARS=$(gh variable list -e $ENV)
          echo "$VARS"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_ACTIONS_PAT: ${{ secrets.GH_Actions_PAT }}

  check-changes:
    name: Check Changes
    runs-on: ubuntu-latest
    outputs:
      terraform_changed: ${{ steps.check.outputs.terraform_changed }}
      code_changed: ${{ steps.check.outputs.code_changed }}
  
    steps:
      - name: Check-out Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full checkout

      - name: Check for Terraform & Code Changes
        id: check
        run: |
          echo "Processing Pull Request"
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}

          git diff --name-only $BASE_SHA $HEAD_SHA > changed_files.txt

          echo "Changed files:"
          cat changed_files.txt
          
          echo "Checking for Terraform changes..."
          if grep -q "^infra/terraform/" changed_files.txt; then
            echo "terraform_changed=true" >> $GITHUB_OUTPUT
            echo "terraform_changed=true"
            echo "terraform_changed=true" >> $GITHUB_OUTPUT
            echo "Matching Terraform files:"
            grep "^infra/terraform/" changed_files.txt
          else
            echo "terraform_changed=false" >> $GITHUB_OUTPUT
            echo "terraform_changed=false"
          fi
          
          echo "Checking for Code changes..."
          if grep -qE "^services/|^packages/" changed_files.txt; then
             echo "code_changed=true" >> $GITHUB_OUTPUT
             echo "code_changed=true"
             echo "Matching Code files:"
             grep -E "^services/|^packages/" changed_files.txt
          else
             echo "code_changed=false" >> $GITHUB_OUTPUT
             echo "code_changed=false"
          fi
      - name: Display check-changes Output
        run: |
          echo "Terraform changed: ${{ steps.check.outputs.terraform_changed }}"
          echo "Code changed: ${{ steps.check.outputs.code_changed }}"

  # we're checking if code changed in each step and not in job level since code-checks are required to pass before merging to main
  code-validation:
    name: Validate Code
    needs: [check-changes]
    runs-on: ubuntu-latest

    steps:
    - name: Check-out Code
      if: needs.check-changes.outputs.code_changed == 'true'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set-up Devcontainer Environment Variables
      if: needs.check-changes.outputs.code_changed == 'true'
      run: |
        echo "PWD=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
        cp .devcontainer/.env.ci .devcontainer/.env
        echo ".devcontainer/.env:"
        cat .devcontainer/.env

    - name: Run Code Validation in Devcontainer
      if: needs.check-changes.outputs.code_changed == 'true'
      uses: devcontainers/ci@v0.3
      with:
        runCmd: |
          set -e
          echo "Running detect-secrets..."
          poetry run pre-commit run detect-secrets --all-files
          
          echo "Running ruff..."
          poetry run pre-commit run ruff --all-files --hook-stage push
          
          echo "Running flake8..."
          poetry run pre-commit run flake8 --all-files --hook-stage push
          
          echo "Running codespell..."
          poetry run pre-commit run codespell --all-files --hook-stage push
          
          echo "Running pytest (unit tests)..."
          poetry run pytest -m "not integration and not e2e"
          
          echo "All code validation checks completed!"
  
  # The reusable workflow checks if terraform file has changed or not, since this is a required status check in the CI
  terraform-plan:
    name: Terraform Plan
    needs: [check-changes]
    strategy:
      matrix:
        environment: [dev, staging]
    uses: ./.github/workflows/terraform-plan-reusable.yml
    with:
      environment: ${{ matrix.environment }}
      terraform_changed: ${{ needs.check-changes.outputs.terraform_changed }}
