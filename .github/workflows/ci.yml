name: CI

on:
  pull_request:
    branches: [main]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
  pull-requests: write  # This allows the workflow to comment on PRs

jobs:
  debug-gh-token:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    steps:
      - name: Check-out Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full checkout
      - name: Debug Git Auth
        run: |
          # Temporarily unset GITHUB_TOKEN
          GITHUB_TOKEN_BACKUP=$GITHUB_TOKEN
          unset GITHUB_TOKEN
          
          echo "Authenticating with PAT..."
          gh auth login --with-token <<< "$GH_ACTIONS_PAT"
          
          echo "Verifying GitHub authentication..."
          gh auth status
          
          ENV=dev
          echo "> Attempting to access $ENV environment variables..."
          echo "Listing variables for $ENV:"
          if ! VARS=$(gh variable list -e $ENV 2>&1); then
            echo "Failed to list variables. Error:"
            echo "$VARS"
            echo "Attempting to get repository details..."
            gh api repos/$GITHUB_REPOSITORY || echo "Failed to access repo API"
            echo "Attempting to list environments..."
            gh api repos/$GITHUB_REPOSITORY/environments || echo "Failed to list environments"
          else
            echo "$VARS"
          fi
          
          # Restore GITHUB_TOKEN if needed for other operations
          export GITHUB_TOKEN=$GITHUB_TOKEN_BACKUP
        env:
          GH_ACTIONS_PAT: ${{ secrets.GH_ACTIONS_PAT }}
      
      - name: Set-up Devcontainer Environment Variables
        run: |
          echo "PWD=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
          cp .devcontainer/.env.ci .devcontainer/.env
          echo ".devcontainer/.env:"
          cat .devcontainer/.env
      - name: Debug Git Auth inside Devcontainer
        uses: devcontainers/ci@v0.3
        env:
          GH_ACTIONS_PAT: ${{ secrets.GH_ACTIONS_PAT }}
        with:
          env: |
            GH_TOKEN=${{ secrets.GH_ACTIONS_PAT }}
          runCmd: |
            # Temporarily unset GITHUB_TOKEN
            GITHUB_TOKEN_BACKUP=$GITHUB_TOKEN
            unset GITHUB_TOKEN

            echo "Authenticating with GH_ACTIONS_PAT (Method 1)..."
            gh auth login --with-token <<< "$GH_TOKEN"

            if ! gh auth status; then
              echo "All authentication methods failed. Debug info:"
              gh auth status
              echo "GitHub API test:"
              gh api user || echo "Failed to access GitHub API"
              exit 1
            fi

            echo "Successfully authenticated with GitHub"

            
            echo "Verifying GitHub authentication..."
            gh auth status
            
            deploy_to_env() {
              local ENV=$1
              ENV=dev
              
              echo ">> Getting variables for $ENV environment:"
              if ! VARS=$(gh variable list -e $ENV 2>&1); then
                echo "Failed to list variables. Error:"
                echo "$VARS"
                echo "Attempting to get repository details..."
                gh api repos/$GITHUB_REPOSITORY || echo "Failed to access repo API"
                echo "Attempting to list environments..."
                gh api repos/$GITHUB_REPOSITORY/environments || echo "Failed to list environments"
              else
                echo "$VARS"
              fi

              AWS_ACCOUNT_ID=$(echo "$VARS" | grep AWS_ACCOUNT_ID | awk '{print $2}')
              AWS_PRIMARY_REGION=$(echo "$VARS" | grep AWS_PRIMARY_REGION | awk '{print $2}')
              AWS_GITHUB_ACTIONS_ROLE=$(echo "$VARS" | grep AWS_GITHUB_ACTIONS_ROLE | awk '{print $2}')

              if [ -z "$AWS_ACCOUNT_ID" ] || [ -z "$AWS_PRIMARY_REGION" ] || [ -z "$AWS_GITHUB_ACTIONS_ROLE" ]; then
                echo "Failed to retrieve necessary AWS variables for $ENV environment"
                return 1
              fi

              echo "AWS_ACCOUNT_ID: $AWS_ACCOUNT_ID"
              echo "AWS_PRIMARY_REGION: $AWS_PRIMARY_REGION"
              echo "AWS_GITHUB_ACTIONS_ROLE: $AWS_GITHUB_ACTIONS_ROLE"

              # Similarly to aws-actions/configure-aws-credentials to set up credentials
              chmod +x .github/scripts/aws-configure-credentials.sh
              if ! aws-configure-credentials \
                --role-to-assume "$AWS_GITHUB_ACTIONS_ROLE" \
                --role-session-name "GithubWorkflow-DeployServices-$ENV" \
                --aws-region "$AWS_PRIMARY_REGION" \
                --role-duration-seconds 3600; then
                echo "Failed to configure AWS credentials for $ENV"
                return 1
              fi

              echo "Verifying AWS authentication for $ENV..."
              aws sts get-caller-identity

              echo ">> Deploying to $ENV environment..."
              poetry run install-all
              poetry run build-all

              echo ">> Deploying to $ENV environment..."
              chmod +x .github/scripts/sam-build-and-deploy-services.sh
              if ! .github/scripts/sam-build-and-deploy-services.sh $ENV $AWS_ACCOUNT_ID $AWS_PRIMARY_REGION; then
                echo "Deployment failed for $ENV environment"
                return 1
              fi

              echo "Deployment completed successfully for $ENV environment"
            }
              deploy_to_env "dev" || exit 1
              deploy_to_env "staging" || exit 1

              # Restore GITHUB_TOKEN if needed for other operations
              export GITHUB_TOKEN=$GITHUB_TOKEN_BACKUP

        
  check-changes:
    name: Check Changes
    runs-on: ubuntu-latest
    outputs:
      terraform_changed: ${{ steps.check.outputs.terraform_changed }}
      code_changed: ${{ steps.check.outputs.code_changed }}
  
    steps:
      - name: Check-out Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full checkout

      - name: Check for Terraform & Code Changes
        id: check
        run: |
          echo "Processing Pull Request"
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          git diff --name-only $BASE_SHA $HEAD_SHA > changed_files.txt
          echo "Changed files:"
          cat changed_files.txt
          
          echo "Checking for Terraform changes..."
          if grep -q "^infra/terraform/" changed_files.txt; then
            echo "terraform_changed=true" >> $GITHUB_OUTPUT
            echo "terraform_changed=true"
            echo "terraform_changed=true" >> $GITHUB_OUTPUT
            echo "Matching Terraform files:"
            grep "^infra/terraform/" changed_files.txt
          else
            echo "terraform_changed=false" >> $GITHUB_OUTPUT
            echo "terraform_changed=false"
          fi
          
          echo "Checking for Code changes..."
          if grep -qE "^services/|^packages/" changed_files.txt; then
             echo "code_changed=true" >> $GITHUB_OUTPUT
             echo "code_changed=true"
             echo "Matching Code files:"
             grep -E "^services/|^packages/" changed_files.txt
          else
             echo "code_changed=false" >> $GITHUB_OUTPUT
             echo "code_changed=false"
          fi
      - name: Display check-changes Output
        run: |
          echo "Terraform changed: ${{ steps.check.outputs.terraform_changed }}"
          echo "Code changed: ${{ steps.check.outputs.code_changed }}"
  # we're checking if code changed in each step and not in job level since code-checks are required to pass before merging to main
  code-validation:
    name: Validate Code
    needs: [check-changes]
    runs-on: ubuntu-latest

    steps:
    - name: Check-out Code
      if: needs.check-changes.outputs.code_changed == 'true'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set-up Devcontainer Environment Variables
      if: needs.check-changes.outputs.code_changed == 'true'
      run: |
        echo "PWD=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
        cp .devcontainer/.env.ci .devcontainer/.env
        echo ".devcontainer/.env:"
        cat .devcontainer/.env
    - name: Run Code Validation in Devcontainer
      if: needs.check-changes.outputs.code_changed == 'true'
      uses: devcontainers/ci@v0.3
      with:
        runCmd: |
          set -e
          echo "Running detect-secrets..."
          poetry run pre-commit run detect-secrets --all-files
          
          echo "Running ruff..."
          poetry run pre-commit run ruff --all-files --hook-stage push
          
          echo "Running flake8..."
          poetry run pre-commit run flake8 --all-files --hook-stage push
          
          echo "Running codespell..."
          poetry run pre-commit run codespell --all-files --hook-stage push
          
          echo "Running pytest (unit tests)..."
          poetry run pytest -m "not integration and not e2e"
          
          echo "All code validation checks completed!"
  
  # The reusable workflow checks if terraform file has changed or not, since this is a required status check in the CI
  terraform-plan:
    name: Terraform Plan
    needs: [check-changes]
    strategy:
      matrix:
        environment: [dev, staging]
    uses: ./.github/workflows/terraform-plan-reusable.yml
    with:
      environment: ${{ matrix.environment }}
      terraform_changed: ${{ needs.check-changes.outputs.terraform_changed }}