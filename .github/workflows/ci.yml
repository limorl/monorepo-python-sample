name: CI

on:
  pull_request:
    branches: [main]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
  pull-requests: write  # This allows the workflow to comment on PRs

jobs:
  check-pr-title:
    name: PR Title Check (amannn)
    runs-on: ubuntu-latest
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          types: |
            fix
            feat
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
          requireScope: false
          # Configure additional validation for the subject based on a regex.
          # This example ensures the subject doesn't start with an uppercase character.
          subjectPattern: ^(?![A-Z]).+$
          # If `subjectPattern` is configured, you can use this property to override
          # the default error message that is shown when the pattern doesn't match.
          # The variables `subject` and `title` can be used within the message.
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.
          # For work-in-progress PRs you can typically use draft pull requests 
          # from GitHub. However, private repositories on the free plan don't have 
          # this option and therefore this action allows you to opt-in to using the 
          # special "[WIP]" prefix to indicate this state. This will avoid the 
          # validation of the PR title and the pull request checks remain pending.
          # Note that a second check will be reported if this is enabled.
          wip: true
          # When using "Squash and merge" on a PR with only one commit, GitHub
          # will suggest using that commit message instead of the PR title for the
          # merge commit, and it's easy to commit this by mistake. Enable this option
          # to also validate the commit message for one commit PRs.
          validateSingleCommit: true
          validateSingleCommitMatchesPrTitle: true

  pr-title-check:
    name: PR Title Check
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install commitlint
        run: npm install @commitlint/config-conventional @commitlint/cli

      - name: Run commitlint on PR title
        run: echo "${{ github.event.pull_request.title }}" | npx commitlint --verbose --config ./.commitlintrc.js

  code-checks:
    name: CI Code Checks
    needs: [pr-title-check]
    runs-on: ubuntu-latest

    steps:
    - name: Check-out Code
      uses: actions/checkout@v4

    - name: Set-up PWD Environment Variable
      run: echo "PWD=${GITHUB_WORKSPACE}" >> $GITHUB_ENV

    - name: Create CI Environment File
      run: |
        cp .devcontainer/.env.ci .devcontainer/.env

    - name: Run pre-commit and pre-push hooks & unit tests
      uses: devcontainers/ci@v0.3
      with:  # Run all code related hooks and skip the terraform ones, they are handled by the terraform-plan action
        runCmd: |
          poetry run pre-commit run --all-files
          poetry run pre-commit run ruff --all-files --hook-stage push
          poetry run pre-commit run flake8 --all-files --hook-stage push
          poetry run pre-commit run codespell --all-files --hook-stage push
          poetry run pre-commit run unit-tests --all-files --hook-stage push
          poetry run pytest -m "not integration and not e2e"
          chmod +x .github/scripts/sam-build-updated-services.sh
          .github/scripts/sam-build-updated-services.sh dev

  check-terraform-changes:
    name: Check for Terraform Changes
    needs: [pr-title-check]
    runs-on: ubuntu-latest
    outputs:
      terraform_changed: ${{ steps.check.outputs.terraform_changed }}
    steps:
      - name: Check-out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full checkout
      
      - name: Check for terraform changes
        id: check
        run: |
          if git diff --name-only origin/${{ github.event.pull_request.base.ref }} ${{ github.sha }} | grep -q '^infra/terraform/'; then
            echo "terraform_changed=true" >> $GITHUB_OUTPUT
          else
            echo "terraform_changed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Display terraform_changed output
        run: |
          echo "Terraform changed: ${{ steps.check.outputs.terraform_changed }}"

  terraform-plan:
    name: Run  # The job name of the reusable workflow will be appended automatically 
    needs: [check-terraform-changes]
    if: needs.check-terraform-changes.outputs.terraform_changed == 'true'
    strategy:
      matrix:
        environment: [dev, staging]
    uses: ./.github/workflows/terraform-plan-reusable.yml
    with:
      environment: ${{ matrix.environment }}

# TODO: Add Build Services
